{"version":3,"sources":["components/cards.js","App.js","serviceWorker.js","index.js"],"names":["CardsComponent","cards","suits","useState","newDeck","setNewDeck","player","setPlayer","serveDeck","setServeDeck","maxPlayer","setMaxPlayer","useEffect","i","length","x","card","push","initializeDeck","type","value","onChange","e","isNaN","parseInt","onChangePlayer","target","onClick","validation","success","msg","Number","isInteger","sort","Math","random","deck","size","serve","l","n","ceil","slice","servePlayer","alert","Object","keys","map","obj","index","key","toString","App","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAuGeA,EArGQ,WACrB,IAAMC,EAAQ,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KACrEC,EAAQ,CAAC,IAAK,IAAK,IAAK,KAFH,EAGGC,mBAAS,IAHZ,mBAGpBC,EAHoB,KAGXC,EAHW,OAICF,mBAAS,GAJV,mBAIpBG,EAJoB,KAIZC,EAJY,OAKOJ,mBAAS,IALhB,mBAKpBK,EALoB,KAKTC,EALS,OAMON,oBAAS,GANhB,mBAMpBO,EANoB,KAMTC,EANS,KAqB3BC,qBAAU,YAZa,WAErB,IADA,IAAIR,EAAU,GACLS,EAAI,EAAGA,EAAIX,EAAMY,OAAQD,IAChC,IAAK,IAAIE,EAAI,EAAGA,EAAId,EAAMa,OAAQC,IAAK,CACrC,IAAIC,EAAOd,EAAMW,GAAK,IAAMZ,EAAMc,GAClCX,EAAQa,KAAKD,GAGjBX,EAAWD,GAKXc,KACC,IAuDH,OACE,6BACE,mDACA,uDACA,2BAAOC,KAAK,SAASC,MAAOd,EAAQe,SAAU,SAACC,GAAD,OAxC3B,SAACA,GACjBC,MAAMD,GAGTf,EAAUe,GAFVf,EAAUiB,SAASF,IAsCkCG,CAAeH,EAAEI,OAAON,UAC7E,4BAAQO,QArBI,WACdhB,GAAa,GACb,IAAIiB,GAZAtB,EAAS,IACXK,GAAa,GAEXL,EAAS,EAAU,CAAEuB,SAAS,EAAOC,IAAK,kCACzCC,OAAOC,UAAU1B,GAEf,CAAEuB,SAAS,EAAMC,IAAK,IAFS,CAAED,SAAS,EAAOC,IAAK,mDAUzDF,EAAWC,SAEbzB,EAAQ6B,MAAK,iBAAM,GAAMC,KAAKC,YAG9B1B,EAAa,eA7CG,SAAC2B,GAOnB,IANA,IAGEC,EAHEC,EAAQ,GACVC,EAAI,EAGJC,EAAIlC,EAECiC,EAJC,IAKNF,EAAOH,KAAKO,MALN,GAKkBF,GAAKC,KAC7BF,EAAMrB,KAAKmB,EAAKM,MAAMH,EAAIA,GAAKF,IAGjC,OAAOC,EAiCaK,CAAYvC,OAE9BK,EAAa,IACbmC,MAAMhB,EAAWE,QASjB,SACA,4BACA,6BACGe,OAAOC,KAAKtC,GAAWuC,KAAI,SAACC,EAAKC,GAChC,OACE,yBAAKC,IAAKD,GAAV,UACUA,EAAQ,EADlB,KACuBzC,EAAUwC,GAAKG,eAI1C,4BACCzC,GAAaJ,EAAS,IAAM,gDAAsBA,EAAtB,4BAC5BI,GAAwB,KAAXJ,GAAiB,qECxFxB8C,E,uKAJX,OAAO,kBAAC,EAAD,U,GAFOC,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.16f9aa7c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst CardsComponent = () => {\n  const cards = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'X', 'J', 'Q', 'K'];\n  const suits = ['D', 'H', 'S', 'C'];\n  const [newDeck, setNewDeck] = useState([]);\n  const [player, setPlayer] = useState(1);\n  const [serveDeck, setServeDeck] = useState({});\n  const [maxPlayer, setMaxPlayer] = useState(false);\n\n  // Function to create a new deck of cards\n  const initializeDeck = () => {\n    let newDeck = [];\n    for (var i = 0; i < suits.length; i++) {\n      for (var x = 0; x < cards.length; x++) {\n        var card = suits[i] + '-' + cards[x];\n        newDeck.push(card);\n      }\n    }\n    setNewDeck(newDeck);\n  };\n\n  // Create the cards once on load\n  useEffect(() => {\n    initializeDeck();\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Function to distibute the cards to number of players\n  const servePlayer = (deck) => {\n    let serve = [],\n      l = 0,\n      len = 52,\n      size,\n      n = player;\n\n    while (l < len) {\n      size = Math.ceil((len - l) / n--);\n      serve.push(deck.slice(l, (l += size)));\n    }\n\n    return serve;\n  };\n\n  // Update player value when input changes\n  const onChangePlayer = (e) => {\n    if (!isNaN(e)) {\n      setPlayer(parseInt(e));\n    } else {\n      setPlayer(e);\n    }\n  };\n\n  // Function to validate player input\n  const validatePlayers = () => {\n    if (player > 52) {\n      setMaxPlayer(true);\n    }\n    if (player < 1) return { success: false, msg: 'Please enter at least 1 player' };\n    if (!Number.isInteger(player)) return { success: false, msg: 'Input value does not exist or value is invalid' };\n\n    return { success: true, msg: '' };\n  };\n\n  // Function to serve the cards\n  const onServe = () => {\n    setMaxPlayer(false);\n    let validation = validatePlayers();\n\n    if (validation.success) {\n      // shuffle deck\n      newDeck.sort(() => 0.5 - Math.random());\n\n      // serve to players\n      setServeDeck({ ...servePlayer(newDeck) });\n    } else {\n      setServeDeck({});\n      alert(validation.msg);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Card Game Generator</h1>\n      <p>Enter number of players:</p>\n      <input type=\"number\" value={player} onChange={(e) => onChangePlayer(e.target.value)} />\n      <button onClick={onServe}>Serve</button>\n      <p></p>\n      <div>\n        {Object.keys(serveDeck).map((obj, index) => {\n          return (\n            <div key={index}>\n              Player {index + 1}: {serveDeck[obj].toString()}\n            </div>\n          );\n        })}\n        <p></p>\n        {maxPlayer && player > 53 && <div>Player 53 until {player} has no available cards.</div>}\n        {maxPlayer && player === 53 && <div>Player 53 has no available cards.</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default CardsComponent;\n","import React, { Component } from 'react';\nimport CardsComponent from '../src/components/cards';\n\nclass App extends Component {\n  render() {\n    return <CardsComponent />;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}